import type {
    Action,
    AssetType,
    BytesType,
    Checksum256Type,
    Float64Type,
    Int64Type,
    NameType,
    PublicKeyType,
    UInt128Type,
    UInt16Type,
    UInt32Type,
    UInt64Type,
    UInt8Type,
    VarUIntType,
} from '@wharfkit/antelope'
import {
    ABI,
    Asset,
    Blob,
    BlockTimestamp,
    Bytes,
    Checksum256,
    Float64,
    Int64,
    Name,
    PublicKey,
    Struct,
    TimePoint,
    TimePointSec,
    UInt128,
    UInt16,
    UInt32,
    UInt64,
    UInt8,
    Variant,
    VarUInt,
} from '@wharfkit/antelope'
import type {ActionOptions, ContractArgs, PartialBy, Table} from '@wharfkit/contract'
import {Contract as BaseContract} from '@wharfkit/contract'
export const abiBlob = Blob.from(
    ''
)
export const abi = ABI.from(abiBlob)
export namespace Types {
    @Struct.type('key_weight')
    export class key_weight extends Struct {
        @Struct.field(PublicKey)
        declare key: PublicKey
        @Struct.field(UInt16)
        declare weight: UInt16
    }
    @Struct.type('block_signing_authority_v0')
    export class block_signing_authority_v0 extends Struct {
        @Struct.field(UInt32)
        declare threshold: UInt32
        @Struct.field(key_weight, {array: true})
        declare keys: key_weight[]
    }
    @Variant.type('variant_block_signing_authority_v0', [block_signing_authority_v0])
    export class variant_block_signing_authority_v0 extends Variant {
        declare value: block_signing_authority_v0
    }
    @Struct.type('abi_hash')
    export class abi_hash extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Checksum256)
        declare hash: Checksum256
    }
    @Struct.type('actfinkey')
    export class actfinkey extends Struct {
        @Struct.field(Name)
        declare finalizer_name: Name
        @Struct.field('string')
        declare finalizer_key: string
    }
    @Struct.type('action_return_buyram')
    export class action_return_buyram extends Struct {
        @Struct.field(Name)
        declare payer: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare quantity: Asset
        @Struct.field(Int64)
        declare bytes_purchased: Int64
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('action_return_ramtransfer')
    export class action_return_ramtransfer extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare to: Name
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field(Int64)
        declare from_ram_bytes: Int64
        @Struct.field(Int64)
        declare to_ram_bytes: Int64
    }
    @Struct.type('action_return_sellram')
    export class action_return_sellram extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Asset)
        declare quantity: Asset
        @Struct.field(Int64)
        declare bytes_sold: Int64
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('activate')
    export class activate extends Struct {
        @Struct.field(Checksum256)
        declare feature_digest: Checksum256
    }
    @Struct.type('permission_level')
    export class permission_level extends Struct {
        @Struct.field(Name)
        declare actor: Name
        @Struct.field(Name)
        declare permission: Name
    }
    @Struct.type('permission_level_weight')
    export class permission_level_weight extends Struct {
        @Struct.field(permission_level)
        declare permission: permission_level
        @Struct.field(UInt16)
        declare weight: UInt16
    }
    @Struct.type('wait_weight')
    export class wait_weight extends Struct {
        @Struct.field(UInt32)
        declare wait_sec: UInt32
        @Struct.field(UInt16)
        declare weight: UInt16
    }
    @Struct.type('authority')
    export class authority extends Struct {
        @Struct.field(UInt32)
        declare threshold: UInt32
        @Struct.field(key_weight, {array: true})
        declare keys: key_weight[]
        @Struct.field(permission_level_weight, {array: true})
        declare accounts: permission_level_weight[]
        @Struct.field(wait_weight, {array: true})
        declare waits: wait_weight[]
    }
    @Struct.type('bid_refund')
    export class bid_refund extends Struct {
        @Struct.field(Name)
        declare bidder: Name
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('bidname')
    export class bidname extends Struct {
        @Struct.field(Name)
        declare bidder: Name
        @Struct.field(Name)
        declare newname: Name
        @Struct.field(Asset)
        declare bid: Asset
    }
    @Struct.type('bidrefund')
    export class bidrefund extends Struct {
        @Struct.field(Name)
        declare bidder: Name
        @Struct.field(Name)
        declare newname: Name
    }
    @Struct.type('producer_key')
    export class producer_key extends Struct {
        @Struct.field(Name)
        declare producer_name: Name
        @Struct.field(PublicKey)
        declare block_signing_key: PublicKey
    }
    @Struct.type('producer_schedule')
    export class producer_schedule extends Struct {
        @Struct.field(UInt32)
        declare version: UInt32
        @Struct.field(producer_key, {array: true})
        declare producers: producer_key[]
    }
    @Struct.type('block_header')
    export class block_header extends Struct {
        @Struct.field(UInt32)
        declare timestamp: UInt32
        @Struct.field(Name)
        declare producer: Name
        @Struct.field(UInt16)
        declare confirmed: UInt16
        @Struct.field(Checksum256)
        declare previous: Checksum256
        @Struct.field(Checksum256)
        declare transaction_mroot: Checksum256
        @Struct.field(Checksum256)
        declare action_mroot: Checksum256
        @Struct.field(UInt32)
        declare schedule_version: UInt32
        @Struct.field(producer_schedule, {optional: true})
        declare new_producers?: producer_schedule
    }
    @Struct.type('block_info_record')
    export class block_info_record extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(UInt32)
        declare block_height: UInt32
        @Struct.field(TimePoint)
        declare block_timestamp: TimePoint
    }
    @Struct.type('blockchain_parameters')
    export class blockchain_parameters extends Struct {
        @Struct.field(UInt64)
        declare max_block_net_usage: UInt64
        @Struct.field(UInt32)
        declare target_block_net_usage_pct: UInt32
        @Struct.field(UInt32)
        declare max_transaction_net_usage: UInt32
        @Struct.field(UInt32)
        declare base_per_transaction_net_usage: UInt32
        @Struct.field(UInt32)
        declare net_usage_leeway: UInt32
        @Struct.field(UInt32)
        declare context_free_discount_net_usage_num: UInt32
        @Struct.field(UInt32)
        declare context_free_discount_net_usage_den: UInt32
        @Struct.field(UInt32)
        declare max_block_cpu_usage: UInt32
        @Struct.field(UInt32)
        declare target_block_cpu_usage_pct: UInt32
        @Struct.field(UInt32)
        declare max_transaction_cpu_usage: UInt32
        @Struct.field(UInt32)
        declare min_transaction_cpu_usage: UInt32
        @Struct.field(UInt32)
        declare max_transaction_lifetime: UInt32
        @Struct.field(UInt32)
        declare deferred_trx_expiration_window: UInt32
        @Struct.field(UInt32)
        declare max_transaction_delay: UInt32
        @Struct.field(UInt32)
        declare max_inline_action_size: UInt32
        @Struct.field(UInt16)
        declare max_inline_action_depth: UInt16
        @Struct.field(UInt16)
        declare max_authority_depth: UInt16
    }
    @Struct.type('blockchain_parameters_v1')
    export class blockchain_parameters_v1 extends blockchain_parameters {
        @Struct.field(UInt32, {optional: true})
        declare max_action_return_value_size?: UInt32
    }
    @Struct.type('buyram')
    export class buyram extends Struct {
        @Struct.field(Name)
        declare payer: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare quant: Asset
    }
    @Struct.type('buyrambytes')
    export class buyrambytes extends Struct {
        @Struct.field(Name)
        declare payer: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(UInt32)
        declare bytes: UInt32
    }
    @Struct.type('buyramself')
    export class buyramself extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Asset)
        declare quant: Asset
    }
    @Struct.type('buyrex')
    export class buyrex extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('canceldelay')
    export class canceldelay extends Struct {
        @Struct.field(permission_level)
        declare canceling_auth: permission_level
        @Struct.field(Checksum256)
        declare trx_id: Checksum256
    }
    @Struct.type('powerup_config_resource')
    export class powerup_config_resource extends Struct {
        @Struct.field(Int64, {optional: true})
        declare current_weight_ratio?: Int64
        @Struct.field(Int64, {optional: true})
        declare target_weight_ratio?: Int64
        @Struct.field(Int64, {optional: true})
        declare assumed_stake_weight?: Int64
        @Struct.field(TimePointSec, {optional: true})
        declare target_timestamp?: TimePointSec
        @Struct.field(Float64, {optional: true})
        declare exponent?: Float64
        @Struct.field(UInt32, {optional: true})
        declare decay_secs?: UInt32
        @Struct.field(Asset, {optional: true})
        declare min_price?: Asset
        @Struct.field(Asset, {optional: true})
        declare max_price?: Asset
    }
    @Struct.type('powerup_config')
    export class powerup_config extends Struct {
        @Struct.field(powerup_config_resource)
        declare net: powerup_config_resource
        @Struct.field(powerup_config_resource)
        declare cpu: powerup_config_resource
        @Struct.field(UInt32, {optional: true})
        declare powerup_days?: UInt32
        @Struct.field(Asset, {optional: true})
        declare min_powerup_fee?: Asset
    }
    @Struct.type('cfgpowerup')
    export class cfgpowerup extends Struct {
        @Struct.field(powerup_config)
        declare args: powerup_config
    }
    @Struct.type('claimrewards')
    export class claimrewards extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('closerex')
    export class closerex extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('cnclrexorder')
    export class cnclrexorder extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('connector')
    export class connector extends Struct {
        @Struct.field(Asset)
        declare balance: Asset
        @Struct.field(Float64)
        declare weight: Float64
    }
    @Struct.type('consolidate')
    export class consolidate extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('defcpuloan')
    export class defcpuloan extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(UInt64)
        declare loan_num: UInt64
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('defnetloan')
    export class defnetloan extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(UInt64)
        declare loan_num: UInt64
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('delegatebw')
    export class delegatebw extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare stake_net_quantity: Asset
        @Struct.field(Asset)
        declare stake_cpu_quantity: Asset
        @Struct.field('bool')
        declare transfer: boolean
    }
    @Struct.type('delegated_bandwidth')
    export class delegated_bandwidth extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare to: Name
        @Struct.field(Asset)
        declare net_weight: Asset
        @Struct.field(Asset)
        declare cpu_weight: Asset
    }
    @Struct.type('deleteauth')
    export class deleteauth extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name)
        declare permission: Name
        @Struct.field(Name, {optional: true})
        declare authorized_by?: Name
    }
    @Struct.type('delfinkey')
    export class delfinkey extends Struct {
        @Struct.field(Name)
        declare finalizer_name: Name
        @Struct.field('string')
        declare finalizer_key: string
    }
    @Struct.type('deposit')
    export class deposit extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('eosio_global_state')
    export class eosio_global_state extends blockchain_parameters {
        @Struct.field(UInt64)
        declare max_ram_size: UInt64
        @Struct.field(UInt64)
        declare total_ram_bytes_reserved: UInt64
        @Struct.field(Int64)
        declare total_ram_stake: Int64
        @Struct.field(BlockTimestamp)
        declare last_producer_schedule_update: BlockTimestamp
        @Struct.field(TimePoint)
        declare last_pervote_bucket_fill: TimePoint
        @Struct.field(Int64)
        declare pervote_bucket: Int64
        @Struct.field(Int64)
        declare perblock_bucket: Int64
        @Struct.field(UInt32)
        declare total_unpaid_blocks: UInt32
        @Struct.field(Int64)
        declare total_activated_stake: Int64
        @Struct.field(TimePoint)
        declare thresh_activated_stake_time: TimePoint
        @Struct.field(UInt16)
        declare last_producer_schedule_size: UInt16
        @Struct.field(Float64)
        declare total_producer_vote_weight: Float64
        @Struct.field(BlockTimestamp)
        declare last_name_close: BlockTimestamp
    }
    @Struct.type('eosio_global_state2')
    export class eosio_global_state2 extends Struct {
        @Struct.field(UInt16)
        declare new_ram_per_block: UInt16
        @Struct.field(BlockTimestamp)
        declare last_ram_increase: BlockTimestamp
        @Struct.field(BlockTimestamp)
        declare last_block_num: BlockTimestamp
        @Struct.field(Float64)
        declare total_producer_votepay_share: Float64
        @Struct.field(UInt8)
        declare revision: UInt8
    }
    @Struct.type('eosio_global_state3')
    export class eosio_global_state3 extends Struct {
        @Struct.field(TimePoint)
        declare last_vpay_state_update: TimePoint
        @Struct.field(Float64)
        declare total_vpay_share_change_rate: Float64
    }
    @Struct.type('eosio_global_state4')
    export class eosio_global_state4 extends Struct {
        @Struct.field(Float64)
        declare continuous_rate: Float64
        @Struct.field(Int64)
        declare inflation_pay_factor: Int64
        @Struct.field(Int64)
        declare votepay_factor: Int64
    }
    @Struct.type('exchange_state')
    export class exchange_state extends Struct {
        @Struct.field(Asset)
        declare supply: Asset
        @Struct.field(connector)
        declare base: connector
        @Struct.field(connector)
        declare quote: connector
    }
    @Struct.type('fin_key_id_generator_info')
    export class fin_key_id_generator_info extends Struct {
        @Struct.field(UInt64)
        declare next_finalizer_key_id: UInt64
    }
    @Struct.type('finalizer_authority')
    export class finalizer_authority extends Struct {
        @Struct.field('string')
        declare description: string
        @Struct.field(UInt64)
        declare weight: UInt64
        @Struct.field(Bytes)
        declare public_key: Bytes
    }
    @Struct.type('finalizer_auth_info')
    export class finalizer_auth_info extends Struct {
        @Struct.field(UInt64)
        declare key_id: UInt64
        @Struct.field(finalizer_authority)
        declare fin_authority: finalizer_authority
    }
    @Struct.type('finalizer_info')
    export class finalizer_info extends Struct {
        @Struct.field(Name)
        declare finalizer_name: Name
        @Struct.field(UInt64)
        declare active_key_id: UInt64
        @Struct.field(Bytes)
        declare active_key_binary: Bytes
        @Struct.field(UInt32)
        declare finalizer_key_count: UInt32
    }
    @Struct.type('finalizer_key_info')
    export class finalizer_key_info extends Struct {
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(Name)
        declare finalizer_name: Name
        @Struct.field('string')
        declare finalizer_key: string
        @Struct.field(Bytes)
        declare finalizer_key_binary: Bytes
    }
    @Struct.type('fundcpuloan')
    export class fundcpuloan extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(UInt64)
        declare loan_num: UInt64
        @Struct.field(Asset)
        declare payment: Asset
    }
    @Struct.type('fundnetloan')
    export class fundnetloan extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(UInt64)
        declare loan_num: UInt64
        @Struct.field(Asset)
        declare payment: Asset
    }
    @Struct.type('init')
    export class init extends Struct {
        @Struct.field(VarUInt)
        declare version: VarUInt
        @Struct.field(Asset.Symbol)
        declare core: Asset.Symbol
    }
    @Struct.type('last_prop_finalizers_info')
    export class last_prop_finalizers_info extends Struct {
        @Struct.field(finalizer_auth_info, {array: true})
        declare last_proposed_finalizers: finalizer_auth_info[]
    }
    @Struct.type('limitauthchg')
    export class limitauthchg extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name, {array: true})
        declare allow_perms: Name[]
        @Struct.field(Name, {array: true})
        declare disallow_perms: Name[]
    }
    @Struct.type('linkauth')
    export class linkauth extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name)
        declare code: Name
        @Struct.field(Name)
        declare type: Name
        @Struct.field(Name)
        declare requirement: Name
        @Struct.field(Name, {optional: true})
        declare authorized_by?: Name
    }
    @Struct.type('logbuyram')
    export class logbuyram extends Struct {
        @Struct.field(Name)
        declare payer: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare quantity: Asset
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('logramchange')
    export class logramchange extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('logsellram')
    export class logsellram extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Asset)
        declare quantity: Asset
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('mvfrsavings')
    export class mvfrsavings extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare rex: Asset
    }
    @Struct.type('mvtosavings')
    export class mvtosavings extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare rex: Asset
    }
    @Struct.type('name_bid')
    export class name_bid extends Struct {
        @Struct.field(Name)
        declare newname: Name
        @Struct.field(Name)
        declare high_bidder: Name
        @Struct.field(Int64)
        declare high_bid: Int64
        @Struct.field(TimePoint)
        declare last_bid_time: TimePoint
    }
    @Struct.type('newaccount')
    export class newaccount extends Struct {
        @Struct.field(Name)
        declare creator: Name
        @Struct.field(Name)
        declare name: Name
        @Struct.field(authority)
        declare owner: authority
        @Struct.field(authority)
        declare active: authority
    }
    @Struct.type('onblock')
    export class onblock extends Struct {
        @Struct.field(block_header)
        declare header: block_header
    }
    @Struct.type('onerror')
    export class onerror extends Struct {
        @Struct.field(UInt128)
        declare sender_id: UInt128
        @Struct.field(Bytes)
        declare sent_trx: Bytes
    }
    @Struct.type('pair_time_point_sec_int64')
    export class pair_time_point_sec_int64 extends Struct {
        @Struct.field(TimePointSec)
        declare first: TimePointSec
        @Struct.field(Int64)
        declare second: Int64
    }
    @Struct.type('powerup')
    export class powerup extends Struct {
        @Struct.field(Name)
        declare payer: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(UInt32)
        declare days: UInt32
        @Struct.field(Int64)
        declare net_frac: Int64
        @Struct.field(Int64)
        declare cpu_frac: Int64
        @Struct.field(Asset)
        declare max_payment: Asset
    }
    @Struct.type('powerup_order')
    export class powerup_order extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(UInt64)
        declare id: UInt64
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Int64)
        declare net_weight: Int64
        @Struct.field(Int64)
        declare cpu_weight: Int64
        @Struct.field(TimePointSec)
        declare expires: TimePointSec
    }
    @Struct.type('powerup_state_resource')
    export class powerup_state_resource extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Int64)
        declare weight: Int64
        @Struct.field(Int64)
        declare weight_ratio: Int64
        @Struct.field(Int64)
        declare assumed_stake_weight: Int64
        @Struct.field(Int64)
        declare initial_weight_ratio: Int64
        @Struct.field(Int64)
        declare target_weight_ratio: Int64
        @Struct.field(TimePointSec)
        declare initial_timestamp: TimePointSec
        @Struct.field(TimePointSec)
        declare target_timestamp: TimePointSec
        @Struct.field(Float64)
        declare exponent: Float64
        @Struct.field(UInt32)
        declare decay_secs: UInt32
        @Struct.field(Asset)
        declare min_price: Asset
        @Struct.field(Asset)
        declare max_price: Asset
        @Struct.field(Int64)
        declare utilization: Int64
        @Struct.field(Int64)
        declare adjusted_utilization: Int64
        @Struct.field(TimePointSec)
        declare utilization_timestamp: TimePointSec
    }
    @Struct.type('powerup_state')
    export class powerup_state extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(powerup_state_resource)
        declare net: powerup_state_resource
        @Struct.field(powerup_state_resource)
        declare cpu: powerup_state_resource
        @Struct.field(UInt32)
        declare powerup_days: UInt32
        @Struct.field(Asset)
        declare min_powerup_fee: Asset
    }
    @Struct.type('powerupexec')
    export class powerupexec extends Struct {
        @Struct.field(Name)
        declare user: Name
        @Struct.field(UInt16)
        declare max: UInt16
    }
    @Struct.type('producer_info')
    export class producer_info extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Float64)
        declare total_votes: Float64
        @Struct.field(PublicKey)
        declare producer_key: PublicKey
        @Struct.field('bool')
        declare is_active: boolean
        @Struct.field('string')
        declare url: string
        @Struct.field(UInt32)
        declare unpaid_blocks: UInt32
        @Struct.field(TimePoint)
        declare last_claim_time: TimePoint
        @Struct.field(UInt16)
        declare location: UInt16
        @Struct.field(variant_block_signing_authority_v0, {optional: true})
        declare producer_authority?: variant_block_signing_authority_v0
    }
    @Struct.type('producer_info2')
    export class producer_info2 extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Float64)
        declare votepay_share: Float64
        @Struct.field(TimePoint)
        declare last_votepay_share_update: TimePoint
    }
    @Struct.type('ramburn')
    export class ramburn extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field('string')
        declare memo: string
    }
    @Struct.type('ramtransfer')
    export class ramtransfer extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare to: Name
        @Struct.field(Int64)
        declare bytes: Int64
        @Struct.field('string')
        declare memo: string
    }
    @Struct.type('refund')
    export class refund extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('refund_request')
    export class refund_request extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(TimePointSec)
        declare request_time: TimePointSec
        @Struct.field(Asset)
        declare net_amount: Asset
        @Struct.field(Asset)
        declare cpu_amount: Asset
    }
    @Struct.type('regfinkey')
    export class regfinkey extends Struct {
        @Struct.field(Name)
        declare finalizer_name: Name
        @Struct.field('string')
        declare finalizer_key: string
        @Struct.field('string')
        declare proof_of_possession: string
    }
    @Struct.type('regproducer')
    export class regproducer extends Struct {
        @Struct.field(Name)
        declare producer: Name
        @Struct.field(PublicKey)
        declare producer_key: PublicKey
        @Struct.field('string')
        declare url: string
        @Struct.field(UInt16)
        declare location: UInt16
    }
    @Struct.type('regproducer2')
    export class regproducer2 extends Struct {
        @Struct.field(Name)
        declare producer: Name
        @Struct.field(variant_block_signing_authority_v0)
        declare producer_authority: variant_block_signing_authority_v0
        @Struct.field('string')
        declare url: string
        @Struct.field(UInt16)
        declare location: UInt16
    }
    @Struct.type('regproxy')
    export class regproxy extends Struct {
        @Struct.field(Name)
        declare proxy: Name
        @Struct.field('bool')
        declare isproxy: boolean
    }
    @Struct.type('rentcpu')
    export class rentcpu extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare loan_payment: Asset
        @Struct.field(Asset)
        declare loan_fund: Asset
    }
    @Struct.type('rentnet')
    export class rentnet extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare loan_payment: Asset
        @Struct.field(Asset)
        declare loan_fund: Asset
    }
    @Struct.type('rex_balance')
    export class rex_balance extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare vote_stake: Asset
        @Struct.field(Asset)
        declare rex_balance: Asset
        @Struct.field(Int64)
        declare matured_rex: Int64
        @Struct.field(pair_time_point_sec_int64, {array: true})
        declare rex_maturities: pair_time_point_sec_int64[]
    }
    @Struct.type('rex_fund')
    export class rex_fund extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare balance: Asset
    }
    @Struct.type('rex_loan')
    export class rex_loan extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare payment: Asset
        @Struct.field(Asset)
        declare balance: Asset
        @Struct.field(Asset)
        declare total_staked: Asset
        @Struct.field(UInt64)
        declare loan_num: UInt64
        @Struct.field(TimePoint)
        declare expiration: TimePoint
    }
    @Struct.type('rex_order')
    export class rex_order extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare rex_requested: Asset
        @Struct.field(Asset)
        declare proceeds: Asset
        @Struct.field(Asset)
        declare stake_change: Asset
        @Struct.field(TimePoint)
        declare order_time: TimePoint
        @Struct.field('bool')
        declare is_open: boolean
    }
    @Struct.type('rex_pool')
    export class rex_pool extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Asset)
        declare total_lent: Asset
        @Struct.field(Asset)
        declare total_unlent: Asset
        @Struct.field(Asset)
        declare total_rent: Asset
        @Struct.field(Asset)
        declare total_lendable: Asset
        @Struct.field(Asset)
        declare total_rex: Asset
        @Struct.field(Asset)
        declare namebid_proceeds: Asset
        @Struct.field(UInt64)
        declare loan_num: UInt64
    }
    @Struct.type('rex_return_buckets')
    export class rex_return_buckets extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(pair_time_point_sec_int64, {array: true})
        declare return_buckets: pair_time_point_sec_int64[]
    }
    @Struct.type('rex_return_pool')
    export class rex_return_pool extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(TimePointSec)
        declare last_dist_time: TimePointSec
        @Struct.field(TimePointSec)
        declare pending_bucket_time: TimePointSec
        @Struct.field(TimePointSec)
        declare oldest_bucket_time: TimePointSec
        @Struct.field(Int64)
        declare pending_bucket_proceeds: Int64
        @Struct.field(Int64)
        declare current_rate_of_increase: Int64
        @Struct.field(Int64)
        declare proceeds: Int64
    }
    @Struct.type('rexexec')
    export class rexexec extends Struct {
        @Struct.field(Name)
        declare user: Name
        @Struct.field(UInt16)
        declare max: UInt16
    }
    @Struct.type('rmvproducer')
    export class rmvproducer extends Struct {
        @Struct.field(Name)
        declare producer: Name
    }
    @Struct.type('sellram')
    export class sellram extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Int64)
        declare bytes: Int64
    }
    @Struct.type('sellrex')
    export class sellrex extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Asset)
        declare rex: Asset
    }
    @Struct.type('setabi')
    export class setabi extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Bytes)
        declare abi: Bytes
        @Struct.field('string', {optional: true})
        declare memo?: string
    }
    @Struct.type('setacctcpu')
    export class setacctcpu extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Int64, {optional: true})
        declare cpu_weight?: Int64
    }
    @Struct.type('setacctnet')
    export class setacctnet extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Int64, {optional: true})
        declare net_weight?: Int64
    }
    @Struct.type('setacctram')
    export class setacctram extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Int64, {optional: true})
        declare ram_bytes?: Int64
    }
    @Struct.type('setalimits')
    export class setalimits extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Int64)
        declare ram_bytes: Int64
        @Struct.field(Int64)
        declare net_weight: Int64
        @Struct.field(Int64)
        declare cpu_weight: Int64
    }
    @Struct.type('setcode')
    export class setcode extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(UInt8)
        declare vmtype: UInt8
        @Struct.field(UInt8)
        declare vmversion: UInt8
        @Struct.field(Bytes)
        declare code: Bytes
        @Struct.field('string', {optional: true})
        declare memo?: string
    }
    @Struct.type('setinflation')
    export class setinflation extends Struct {
        @Struct.field(Int64)
        declare annual_rate: Int64
        @Struct.field(Int64)
        declare inflation_pay_factor: Int64
        @Struct.field(Int64)
        declare votepay_factor: Int64
    }
    @Struct.type('setparams')
    export class setparams extends Struct {
        @Struct.field(blockchain_parameters_v1)
        declare params: blockchain_parameters_v1
    }
    @Struct.type('setpriv')
    export class setpriv extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(UInt8)
        declare is_priv: UInt8
    }
    @Struct.type('setram')
    export class setram extends Struct {
        @Struct.field(UInt64)
        declare max_ram_size: UInt64
    }
    @Struct.type('setramrate')
    export class setramrate extends Struct {
        @Struct.field(UInt16)
        declare bytes_per_block: UInt16
    }
    @Struct.type('setrex')
    export class setrex extends Struct {
        @Struct.field(Asset)
        declare balance: Asset
    }
    @Struct.type('switchtosvnn')
    export class switchtosvnn extends Struct {}
    @Struct.type('undelegatebw')
    export class undelegatebw extends Struct {
        @Struct.field(Name)
        declare from: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare unstake_net_quantity: Asset
        @Struct.field(Asset)
        declare unstake_cpu_quantity: Asset
    }
    @Struct.type('unlinkauth')
    export class unlinkauth extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name)
        declare code: Name
        @Struct.field(Name)
        declare type: Name
        @Struct.field(Name, {optional: true})
        declare authorized_by?: Name
    }
    @Struct.type('unregprod')
    export class unregprod extends Struct {
        @Struct.field(Name)
        declare producer: Name
    }
    @Struct.type('unstaketorex')
    export class unstaketorex extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare receiver: Name
        @Struct.field(Asset)
        declare from_net: Asset
        @Struct.field(Asset)
        declare from_cpu: Asset
    }
    @Struct.type('updateauth')
    export class updateauth extends Struct {
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name)
        declare permission: Name
        @Struct.field(Name)
        declare parent: Name
        @Struct.field(authority)
        declare auth: authority
        @Struct.field(Name, {optional: true})
        declare authorized_by?: Name
    }
    @Struct.type('updaterex')
    export class updaterex extends Struct {
        @Struct.field(Name)
        declare owner: Name
    }
    @Struct.type('updtrevision')
    export class updtrevision extends Struct {
        @Struct.field(UInt8)
        declare revision: UInt8
    }
    @Struct.type('user_resources')
    export class user_resources extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare net_weight: Asset
        @Struct.field(Asset)
        declare cpu_weight: Asset
        @Struct.field(Int64)
        declare ram_bytes: Int64
    }
    @Struct.type('voteproducer')
    export class voteproducer extends Struct {
        @Struct.field(Name)
        declare voter: Name
        @Struct.field(Name)
        declare proxy: Name
        @Struct.field(Name, {array: true})
        declare producers: Name[]
    }
    @Struct.type('voter_info')
    export class voter_info extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Name)
        declare proxy: Name
        @Struct.field(Name, {array: true})
        declare producers: Name[]
        @Struct.field(Int64)
        declare staked: Int64
        @Struct.field(Float64)
        declare last_vote_weight: Float64
        @Struct.field(Float64)
        declare proxied_vote_weight: Float64
        @Struct.field('bool')
        declare is_proxy: boolean
        @Struct.field(UInt32)
        declare flags1: UInt32
        @Struct.field(UInt32)
        declare reserved2: UInt32
        @Struct.field(Asset)
        declare reserved3: Asset
    }
    @Struct.type('voteupdate')
    export class voteupdate extends Struct {
        @Struct.field(Name)
        declare voter_name: Name
    }
    @Struct.type('wasmcfg')
    export class wasmcfg extends Struct {
        @Struct.field(Name)
        declare settings: Name
    }
    @Struct.type('withdraw')
    export class withdraw extends Struct {
        @Struct.field(Name)
        declare owner: Name
        @Struct.field(Asset)
        declare amount: Asset
    }
    @Struct.type('limit_auth_change')
    export class limit_auth_change extends Struct {
        @Struct.field(UInt8)
        declare version: UInt8
        @Struct.field(Name)
        declare account: Name
        @Struct.field(Name, {array: true})
        declare allow_perms: Name[]
        @Struct.field(Name, {array: true})
        declare disallow_perms: Name[]
    }
}
export const TableMap = {
    abihash: Types.abi_hash,
    bidrefunds: Types.bid_refund,
    blockinfo: Types.block_info_record,
    cpuloan: Types.rex_loan,
    delband: Types.delegated_bandwidth,
    finalizers: Types.finalizer_info,
    finkeyidgen: Types.fin_key_id_generator_info,
    finkeys: Types.finalizer_key_info,
    global: Types.eosio_global_state,
    global2: Types.eosio_global_state2,
    global3: Types.eosio_global_state3,
    global4: Types.eosio_global_state4,
    lastpropfins: Types.last_prop_finalizers_info,
    namebids: Types.name_bid,
    netloan: Types.rex_loan,
    'powup.order': Types.powerup_order,
    'powup.state': Types.powerup_state,
    producers: Types.producer_info,
    producers2: Types.producer_info2,
    rammarket: Types.exchange_state,
    refunds: Types.refund_request,
    retbuckets: Types.rex_return_buckets,
    rexbal: Types.rex_balance,
    rexfund: Types.rex_fund,
    rexpool: Types.rex_pool,
    rexqueue: Types.rex_order,
    rexretpool: Types.rex_return_pool,
    userres: Types.user_resources,
    voters: Types.voter_info,
    limitauthchg: Types.limit_auth_change,
}
export interface TableTypes {
    abihash: Types.abi_hash
    bidrefunds: Types.bid_refund
    blockinfo: Types.block_info_record
    cpuloan: Types.rex_loan
    delband: Types.delegated_bandwidth
    finalizers: Types.finalizer_info
    finkeyidgen: Types.fin_key_id_generator_info
    finkeys: Types.finalizer_key_info
    global: Types.eosio_global_state
    global2: Types.eosio_global_state2
    global3: Types.eosio_global_state3
    global4: Types.eosio_global_state4
    lastpropfins: Types.last_prop_finalizers_info
    namebids: Types.name_bid
    netloan: Types.rex_loan
    'powup.order': Types.powerup_order
    'powup.state': Types.powerup_state
    producers: Types.producer_info
    producers2: Types.producer_info2
    rammarket: Types.exchange_state
    refunds: Types.refund_request
    retbuckets: Types.rex_return_buckets
    rexbal: Types.rex_balance
    rexfund: Types.rex_fund
    rexpool: Types.rex_pool
    rexqueue: Types.rex_order
    rexretpool: Types.rex_return_pool
    userres: Types.user_resources
    voters: Types.voter_info
    limitauthchg: Types.limit_auth_change
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any
export type TableNames = keyof TableTypes
export namespace ActionParams {
    export namespace Type {
        export interface permission_level {
            actor: NameType
            permission: NameType
        }
        export interface powerup_config {
            net: Type.powerup_config_resource
            cpu: Type.powerup_config_resource
            powerup_days: UInt32Type
            min_powerup_fee: AssetType
        }
        export interface powerup_config_resource {
            current_weight_ratio: Int64Type
            target_weight_ratio: Int64Type
            assumed_stake_weight: Int64Type
            target_timestamp: TimePointSec
            exponent: Float64Type
            decay_secs: UInt32Type
            min_price: AssetType
            max_price: AssetType
        }
        export interface authority {
            threshold: UInt32Type
            keys: Type.key_weight[]
            accounts: Type.permission_level_weight[]
            waits: Type.wait_weight[]
        }
        export interface key_weight {
            key: PublicKeyType
            weight: UInt16Type
        }
        export interface permission_level_weight {
            permission: Type.permission_level
            weight: UInt16Type
        }
        export interface wait_weight {
            wait_sec: UInt32Type
            weight: UInt16Type
        }
        export interface block_header {
            timestamp: UInt32Type
            producer: NameType
            confirmed: UInt16Type
            previous: Checksum256Type
            transaction_mroot: Checksum256Type
            action_mroot: Checksum256Type
            schedule_version: UInt32Type
            new_producers: Type.producer_schedule
        }
        export interface producer_schedule {
            version: UInt32Type
            producers: Type.producer_key[]
        }
        export interface producer_key {
            producer_name: NameType
            block_signing_key: PublicKeyType
        }
        export type variant_block_signing_authority_v0 =
            | Type.block_signing_authority_v0
            | Types.variant_block_signing_authority_v0
        export interface block_signing_authority_v0 {
            threshold: UInt32Type
            keys: Type.key_weight[]
        }
        export interface blockchain_parameters_v1 {
            max_action_return_value_size: UInt32Type
        }
    }
    export interface actfinkey {
        finalizer_name: NameType
        finalizer_key: string
    }
    export interface activate {
        feature_digest: Checksum256Type
    }
    export interface bidname {
        bidder: NameType
        newname: NameType
        bid: AssetType
    }
    export interface bidrefund {
        bidder: NameType
        newname: NameType
    }
    export interface buyram {
        payer: NameType
        receiver: NameType
        quant: AssetType
    }
    export interface buyrambytes {
        payer: NameType
        receiver: NameType
        bytes: UInt32Type
    }
    export interface buyramself {
        account: NameType
        quant: AssetType
    }
    export interface buyrex {
        from: NameType
        amount: AssetType
    }
    export interface canceldelay {
        canceling_auth: Type.permission_level
        trx_id: Checksum256Type
    }
    export interface cfgpowerup {
        args: Type.powerup_config
    }
    export interface claimrewards {
        owner: NameType
    }
    export interface closerex {
        owner: NameType
    }
    export interface cnclrexorder {
        owner: NameType
    }
    export interface consolidate {
        owner: NameType
    }
    export interface defcpuloan {
        from: NameType
        loan_num: UInt64Type
        amount: AssetType
    }
    export interface defnetloan {
        from: NameType
        loan_num: UInt64Type
        amount: AssetType
    }
    export interface delegatebw {
        from: NameType
        receiver: NameType
        stake_net_quantity: AssetType
        stake_cpu_quantity: AssetType
        transfer: boolean
    }
    export interface deleteauth {
        account: NameType
        permission: NameType
        authorized_by?: NameType
    }
    export interface delfinkey {
        finalizer_name: NameType
        finalizer_key: string
    }
    export interface deposit {
        owner: NameType
        amount: AssetType
    }
    export interface fundcpuloan {
        from: NameType
        loan_num: UInt64Type
        payment: AssetType
    }
    export interface fundnetloan {
        from: NameType
        loan_num: UInt64Type
        payment: AssetType
    }
    export interface init {
        version: VarUIntType
        core: Asset.SymbolType
    }
    export interface limitauthchg {
        account: NameType
        allow_perms: NameType[]
        disallow_perms: NameType[]
    }
    export interface linkauth {
        account: NameType
        code: NameType
        type: NameType
        requirement: NameType
        authorized_by?: NameType
    }
    export interface logbuyram {
        payer: NameType
        receiver: NameType
        quantity: AssetType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface logramchange {
        owner: NameType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface logsellram {
        account: NameType
        quantity: AssetType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface mvfrsavings {
        owner: NameType
        rex: AssetType
    }
    export interface mvtosavings {
        owner: NameType
        rex: AssetType
    }
    export interface newaccount {
        creator: NameType
        name: NameType
        owner: Type.authority
        active: Type.authority
    }
    export interface onblock {
        header: Type.block_header
    }
    export interface onerror {
        sender_id: UInt128Type
        sent_trx: BytesType
    }
    export interface powerup {
        payer: NameType
        receiver: NameType
        days: UInt32Type
        net_frac: Int64Type
        cpu_frac: Int64Type
        max_payment: AssetType
    }
    export interface powerupexec {
        user: NameType
        max: UInt16Type
    }
    export interface ramburn {
        owner: NameType
        bytes: Int64Type
        memo: string
    }
    export interface ramtransfer {
        from: NameType
        to: NameType
        bytes: Int64Type
        memo: string
    }
    export interface refund {
        owner: NameType
    }
    export interface regfinkey {
        finalizer_name: NameType
        finalizer_key: string
        proof_of_possession: string
    }
    export interface regproducer {
        producer: NameType
        producer_key: PublicKeyType
        url: string
        location: UInt16Type
    }
    export interface regproducer2 {
        producer: NameType
        producer_authority: Type.variant_block_signing_authority_v0
        url: string
        location: UInt16Type
    }
    export interface regproxy {
        proxy: NameType
        isproxy: boolean
    }
    export interface rentcpu {
        from: NameType
        receiver: NameType
        loan_payment: AssetType
        loan_fund: AssetType
    }
    export interface rentnet {
        from: NameType
        receiver: NameType
        loan_payment: AssetType
        loan_fund: AssetType
    }
    export interface rexexec {
        user: NameType
        max: UInt16Type
    }
    export interface rmvproducer {
        producer: NameType
    }
    export interface sellram {
        account: NameType
        bytes: Int64Type
    }
    export interface sellrex {
        from: NameType
        rex: AssetType
    }
    export interface setabi {
        account: NameType
        abi: BytesType
        memo?: string
    }
    export interface setacctcpu {
        account: NameType
        cpu_weight?: Int64Type
    }
    export interface setacctnet {
        account: NameType
        net_weight?: Int64Type
    }
    export interface setacctram {
        account: NameType
        ram_bytes?: Int64Type
    }
    export interface setalimits {
        account: NameType
        ram_bytes: Int64Type
        net_weight: Int64Type
        cpu_weight: Int64Type
    }
    export interface setcode {
        account: NameType
        vmtype: UInt8Type
        vmversion: UInt8Type
        code: BytesType
        memo?: string
    }
    export interface setinflation {
        annual_rate: Int64Type
        inflation_pay_factor: Int64Type
        votepay_factor: Int64Type
    }
    export interface setparams {
        params: Type.blockchain_parameters_v1
    }
    export interface setpriv {
        account: NameType
        is_priv: UInt8Type
    }
    export interface setram {
        max_ram_size: UInt64Type
    }
    export interface setramrate {
        bytes_per_block: UInt16Type
    }
    export interface setrex {
        balance: AssetType
    }
    export interface switchtosvnn {}
    export interface undelegatebw {
        from: NameType
        receiver: NameType
        unstake_net_quantity: AssetType
        unstake_cpu_quantity: AssetType
    }
    export interface unlinkauth {
        account: NameType
        code: NameType
        type: NameType
        authorized_by?: NameType
    }
    export interface unregprod {
        producer: NameType
    }
    export interface unstaketorex {
        owner: NameType
        receiver: NameType
        from_net: AssetType
        from_cpu: AssetType
    }
    export interface updateauth {
        account: NameType
        permission: NameType
        parent: NameType
        auth: Type.authority
        authorized_by?: NameType
    }
    export interface updaterex {
        owner: NameType
    }
    export interface updtrevision {
        revision: UInt8Type
    }
    export interface voteproducer {
        voter: NameType
        proxy: NameType
        producers: NameType[]
    }
    export interface voteupdate {
        voter_name: NameType
    }
    export interface wasmcfg {
        settings: NameType
    }
    export interface withdraw {
        owner: NameType
        amount: AssetType
    }
}
export interface ActionNameParams {
    actfinkey: ActionParams.actfinkey
    activate: ActionParams.activate
    bidname: ActionParams.bidname
    bidrefund: ActionParams.bidrefund
    buyram: ActionParams.buyram
    buyrambytes: ActionParams.buyrambytes
    buyramself: ActionParams.buyramself
    buyrex: ActionParams.buyrex
    canceldelay: ActionParams.canceldelay
    cfgpowerup: ActionParams.cfgpowerup
    claimrewards: ActionParams.claimrewards
    closerex: ActionParams.closerex
    cnclrexorder: ActionParams.cnclrexorder
    consolidate: ActionParams.consolidate
    defcpuloan: ActionParams.defcpuloan
    defnetloan: ActionParams.defnetloan
    delegatebw: ActionParams.delegatebw
    deleteauth: ActionParams.deleteauth
    delfinkey: ActionParams.delfinkey
    deposit: ActionParams.deposit
    fundcpuloan: ActionParams.fundcpuloan
    fundnetloan: ActionParams.fundnetloan
    init: ActionParams.init
    limitauthchg: ActionParams.limitauthchg
    linkauth: ActionParams.linkauth
    logbuyram: ActionParams.logbuyram
    logramchange: ActionParams.logramchange
    logsellram: ActionParams.logsellram
    mvfrsavings: ActionParams.mvfrsavings
    mvtosavings: ActionParams.mvtosavings
    newaccount: ActionParams.newaccount
    onblock: ActionParams.onblock
    onerror: ActionParams.onerror
    powerup: ActionParams.powerup
    powerupexec: ActionParams.powerupexec
    ramburn: ActionParams.ramburn
    ramtransfer: ActionParams.ramtransfer
    refund: ActionParams.refund
    regfinkey: ActionParams.regfinkey
    regproducer: ActionParams.regproducer
    regproducer2: ActionParams.regproducer2
    regproxy: ActionParams.regproxy
    rentcpu: ActionParams.rentcpu
    rentnet: ActionParams.rentnet
    rexexec: ActionParams.rexexec
    rmvproducer: ActionParams.rmvproducer
    sellram: ActionParams.sellram
    sellrex: ActionParams.sellrex
    setabi: ActionParams.setabi
    setacctcpu: ActionParams.setacctcpu
    setacctnet: ActionParams.setacctnet
    setacctram: ActionParams.setacctram
    setalimits: ActionParams.setalimits
    setcode: ActionParams.setcode
    setinflation: ActionParams.setinflation
    setparams: ActionParams.setparams
    setpriv: ActionParams.setpriv
    setram: ActionParams.setram
    setramrate: ActionParams.setramrate
    setrex: ActionParams.setrex
    switchtosvnn: ActionParams.switchtosvnn
    undelegatebw: ActionParams.undelegatebw
    unlinkauth: ActionParams.unlinkauth
    unregprod: ActionParams.unregprod
    unstaketorex: ActionParams.unstaketorex
    updateauth: ActionParams.updateauth
    updaterex: ActionParams.updaterex
    updtrevision: ActionParams.updtrevision
    voteproducer: ActionParams.voteproducer
    voteupdate: ActionParams.voteupdate
    wasmcfg: ActionParams.wasmcfg
    withdraw: ActionParams.withdraw
}
export type ActionNames = keyof ActionNameParams
export interface ActionReturnValues {
    buyram: Types.action_return_buyram
    buyrambytes: Types.action_return_buyram
    buyramself: Types.action_return_buyram
    ramburn: Types.action_return_ramtransfer
    ramtransfer: Types.action_return_ramtransfer
    sellram: Types.action_return_sellram
}
export type ActionReturnNames = keyof ActionReturnValues
export class Contract extends BaseContract {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
        super({
            client: args.client,
            abi: abi,
            account: args.account || Name.from('eosio'),
        })
    }
    action<T extends ActionNames>(
        name: T,
        data: ActionNameParams[T],
        options?: ActionOptions
    ): Action {
        return super.action(name, data, options)
    }
    readonly<T extends ActionReturnNames>(
        name: T,
        data?: ActionNameParams[T]
    ): ActionReturnValues[T] {
        return super.readonly(name, data) as unknown as ActionReturnValues[T]
    }
    table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
        return super.table(name, scope, TableMap[name])
    }
}
