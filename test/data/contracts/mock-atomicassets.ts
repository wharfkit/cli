import type {
    Action,
    AssetType,
    BytesType,
    Float32Type,
    Float64Type,
    Int16Type,
    Int32Type,
    Int64Type,
    Int8Type,
    NameType,
    UInt16Type,
    UInt32Type,
    UInt64Type,
    UInt8Type,
} from '@wharfkit/antelope'
import {
    ABI,
    Asset,
    Blob,
    Bytes,
    Float32,
    Float64,
    Int16,
    Int32,
    Int64,
    Int8,
    Name,
    Struct,
    UInt16,
    UInt32,
    UInt64,
    UInt8,
    Variant,
} from '@wharfkit/antelope'
import type {ActionOptions, ContractArgs, PartialBy, Table} from '@wharfkit/contract'
import {Contract as BaseContract} from '@wharfkit/contract'
export const abiBlob = Blob.from(
    ''
)
export const abi = ABI.from(abiBlob)
export class Contract extends BaseContract {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
        super({
            client: args.client,
            abi: abi,
            account: args.account || Name.from('atomicassets'),
        })
    }
    action<T extends ActionNames>(
        name: T,
        data: ActionNameParams[T],
        options?: ActionOptions
    ): Action {
        return super.action(name, data, options)
    }
    table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
        return super.table(name, scope, TableMap[name])
    }
}
export interface ActionNameParams {
    acceptoffer: ActionParams.acceptoffer
    addcolauth: ActionParams.addcolauth
    addconftoken: ActionParams.addconftoken
    addnotifyacc: ActionParams.addnotifyacc
    admincoledit: ActionParams.admincoledit
    announcedepo: ActionParams.announcedepo
    backasset: ActionParams.backasset
    burnasset: ActionParams.burnasset
    canceloffer: ActionParams.canceloffer
    createcol: ActionParams.createcol
    createoffer: ActionParams.createoffer
    createschema: ActionParams.createschema
    createtempl: ActionParams.createtempl
    declineoffer: ActionParams.declineoffer
    extendschema: ActionParams.extendschema
    forbidnotify: ActionParams.forbidnotify
    init: ActionParams.init
    locktemplate: ActionParams.locktemplate
    logbackasset: ActionParams.logbackasset
    logburnasset: ActionParams.logburnasset
    logmint: ActionParams.logmint
    lognewoffer: ActionParams.lognewoffer
    lognewtempl: ActionParams.lognewtempl
    logsetdata: ActionParams.logsetdata
    logtransfer: ActionParams.logtransfer
    mintasset: ActionParams.mintasset
    payofferram: ActionParams.payofferram
    remcolauth: ActionParams.remcolauth
    remnotifyacc: ActionParams.remnotifyacc
    setassetdata: ActionParams.setassetdata
    setcoldata: ActionParams.setcoldata
    setmarketfee: ActionParams.setmarketfee
    setversion: ActionParams.setversion
    transfer: ActionParams.transfer
    withdraw: ActionParams.withdraw
}
export namespace ActionParams {
    export namespace Type {
        export interface FORMAT {
            name: string
            type: string
        }
        export interface pair_string_ATOMIC_ATTRIBUTE {
            key: string
            value: Type.variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC
        }
        export type variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC =

                | Int8Type
                | Int16Type
                | Int32Type
                | Int64Type
                | UInt8Type
                | UInt16Type
                | UInt32Type
                | UInt64Type
                | Float32Type
                | Float64Type
                | string
                | BytesType
                | Int16Type[]
                | Int32Type[]
                | Int64Type[]
                | UInt8Type[]
                | UInt16Type[]
                | UInt32Type[]
                | UInt64Type[]
                | Float32Type[]
                | Float64Type[]
                | string[]
                | Types.variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC
    }
    export interface acceptoffer {
        offer_id: UInt64Type
    }
    export interface addcolauth {
        collection_name: NameType
        account_to_add: NameType
    }
    export interface addconftoken {
        token_contract: NameType
        token_symbol: Asset.SymbolType
    }
    export interface addnotifyacc {
        collection_name: NameType
        account_to_add: NameType
    }
    export interface admincoledit {
        collection_format_extension: Type.FORMAT[]
    }
    export interface announcedepo {
        owner: NameType
        symbol_to_announce: Asset.SymbolType
    }
    export interface backasset {
        payer: NameType
        asset_owner: NameType
        asset_id: UInt64Type
        token_to_back: AssetType
    }
    export interface burnasset {
        asset_owner: NameType
        asset_id: UInt64Type
    }
    export interface canceloffer {
        offer_id: UInt64Type
    }
    export interface createcol {
        author: NameType
        collection_name: NameType
        allow_notify: boolean
        authorized_accounts: NameType[]
        notify_accounts: NameType[]
        market_fee: Float64Type
        data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface createoffer {
        sender: NameType
        recipient: NameType
        sender_asset_ids: UInt64Type[]
        recipient_asset_ids: UInt64Type[]
        memo: string
    }
    export interface createschema {
        authorized_creator: NameType
        collection_name: NameType
        schema_name: NameType
        schema_format: Type.FORMAT[]
    }
    export interface createtempl {
        authorized_creator: NameType
        collection_name: NameType
        schema_name: NameType
        transferable: boolean
        burnable: boolean
        max_supply: UInt32Type
        immutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface declineoffer {
        offer_id: UInt64Type
    }
    export interface extendschema {
        authorized_editor: NameType
        collection_name: NameType
        schema_name: NameType
        schema_format_extension: Type.FORMAT[]
    }
    export interface forbidnotify {
        collection_name: NameType
    }
    export interface init {}
    export interface locktemplate {
        authorized_editor: NameType
        collection_name: NameType
        template_id: Int32Type
    }
    export interface logbackasset {
        asset_owner: NameType
        asset_id: UInt64Type
        backed_token: AssetType
    }
    export interface logburnasset {
        asset_owner: NameType
        asset_id: UInt64Type
        collection_name: NameType
        schema_name: NameType
        template_id: Int32Type
        backed_tokens: AssetType[]
        old_immutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        old_mutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        asset_ram_payer: NameType
    }
    export interface logmint {
        asset_id: UInt64Type
        authorized_minter: NameType
        collection_name: NameType
        schema_name: NameType
        template_id: Int32Type
        new_asset_owner: NameType
        immutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        mutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        backed_tokens: AssetType[]
        immutable_template_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface lognewoffer {
        offer_id: UInt64Type
        sender: NameType
        recipient: NameType
        sender_asset_ids: UInt64Type[]
        recipient_asset_ids: UInt64Type[]
        memo: string
    }
    export interface lognewtempl {
        template_id: Int32Type
        authorized_creator: NameType
        collection_name: NameType
        schema_name: NameType
        transferable: boolean
        burnable: boolean
        max_supply: UInt32Type
        immutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface logsetdata {
        asset_owner: NameType
        asset_id: UInt64Type
        old_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        new_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface logtransfer {
        collection_name: NameType
        from: NameType
        to: NameType
        asset_ids: UInt64Type[]
        memo: string
    }
    export interface mintasset {
        authorized_minter: NameType
        collection_name: NameType
        schema_name: NameType
        template_id: Int32Type
        new_asset_owner: NameType
        immutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        mutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
        tokens_to_back: AssetType[]
    }
    export interface payofferram {
        payer: NameType
        offer_id: UInt64Type
    }
    export interface remcolauth {
        collection_name: NameType
        account_to_remove: NameType
    }
    export interface remnotifyacc {
        collection_name: NameType
        account_to_remove: NameType
    }
    export interface setassetdata {
        authorized_editor: NameType
        asset_owner: NameType
        asset_id: UInt64Type
        new_mutable_data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface setcoldata {
        collection_name: NameType
        data: Type.pair_string_ATOMIC_ATTRIBUTE[]
    }
    export interface setmarketfee {
        collection_name: NameType
        market_fee: Float64Type
    }
    export interface setversion {
        new_version: string
    }
    export interface transfer {
        from: NameType
        to: NameType
        asset_ids: UInt64Type[]
        memo: string
    }
    export interface withdraw {
        owner: NameType
        token_to_withdraw: AssetType
    }
}
export namespace Types {
    @Variant.type(
        'variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC',
        [
            Int8,
            Int16,
            Int32,
            Int64,
            UInt8,
            UInt16,
            UInt32,
            UInt64,
            Float32,
            Float64,
            'string',
            Bytes,
            {type: Int16, array: true},
            {type: Int32, array: true},
            {type: Int64, array: true},
            {type: UInt8, array: true},
            {type: UInt16, array: true},
            {type: UInt32, array: true},
            {type: UInt64, array: true},
            {type: Float32, array: true},
            {type: Float64, array: true},
            'string[]',
        ]
    )
    export class variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC extends Variant {
        declare value:
            | Int8
            | Int16
            | Int32
            | Int64
            | UInt8
            | UInt16
            | UInt32
            | UInt64
            | Float32
            | Float64
            | string
            | Bytes
            | Int16[]
            | Int32[]
            | Int64[]
            | UInt8[]
            | UInt16[]
            | UInt32[]
            | UInt64[]
            | Float32[]
            | Float64[]
            | string[]
    }
    @Struct.type('FORMAT')
    export class FORMAT extends Struct {
        @Struct.field('string')
        name!: string
        @Struct.field('string')
        type!: string
    }
    @Struct.type('acceptoffer')
    export class acceptoffer extends Struct {
        @Struct.field(UInt64)
        offer_id!: UInt64
    }
    @Struct.type('addcolauth')
    export class addcolauth extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        account_to_add!: Name
    }
    @Struct.type('addconftoken')
    export class addconftoken extends Struct {
        @Struct.field(Name)
        token_contract!: Name
        @Struct.field(Asset.Symbol)
        token_symbol!: Asset.Symbol
    }
    @Struct.type('addnotifyacc')
    export class addnotifyacc extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        account_to_add!: Name
    }
    @Struct.type('admincoledit')
    export class admincoledit extends Struct {
        @Struct.field(FORMAT, {array: true})
        collection_format_extension!: FORMAT[]
    }
    @Struct.type('announcedepo')
    export class announcedepo extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset.Symbol)
        symbol_to_announce!: Asset.Symbol
    }
    @Struct.type('assets_s')
    export class assets_s extends Struct {
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Name)
        ram_payer!: Name
        @Struct.field(Asset, {array: true})
        backed_tokens!: Asset[]
        @Struct.field(UInt8, {array: true})
        immutable_serialized_data!: UInt8[]
        @Struct.field(UInt8, {array: true})
        mutable_serialized_data!: UInt8[]
    }
    @Struct.type('backasset')
    export class backasset extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(Asset)
        token_to_back!: Asset
    }
    @Struct.type('balances_s')
    export class balances_s extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset, {array: true})
        quantities!: Asset[]
    }
    @Struct.type('burnasset')
    export class burnasset extends Struct {
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
    }
    @Struct.type('canceloffer')
    export class canceloffer extends Struct {
        @Struct.field(UInt64)
        offer_id!: UInt64
    }
    @Struct.type('collections_s')
    export class collections_s extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        author!: Name
        @Struct.field('bool')
        allow_notify!: boolean
        @Struct.field(Name, {array: true})
        authorized_accounts!: Name[]
        @Struct.field(Name, {array: true})
        notify_accounts!: Name[]
        @Struct.field(Float64)
        market_fee!: Float64
        @Struct.field(UInt8, {array: true})
        serialized_data!: UInt8[]
    }
    @Struct.type('extended_symbol')
    export class extended_symbol extends Struct {
        @Struct.field(Asset.Symbol)
        sym!: Asset.Symbol
        @Struct.field(Name)
        contract!: Name
    }
    @Struct.type('config_s')
    export class config_s extends Struct {
        @Struct.field(UInt64)
        asset_counter!: UInt64
        @Struct.field(Int32)
        template_counter!: Int32
        @Struct.field(UInt64)
        offer_counter!: UInt64
        @Struct.field(FORMAT, {array: true})
        collection_format!: FORMAT[]
        @Struct.field(extended_symbol, {array: true})
        supported_tokens!: extended_symbol[]
    }
    @Struct.type('pair_string_ATOMIC_ATTRIBUTE')
    export class pair_string_ATOMIC_ATTRIBUTE extends Struct {
        @Struct.field('string')
        key!: string
        @Struct.field(
            variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC
        )
        value!: variant_int8_int16_int32_int64_uint8_uint16_uint32_uint64_float32_float64_string_INT8_VEC_INT16_VEC_INT32_VEC_INT64_VEC_UINT8_VEC_UINT16_VEC_UINT32_VEC_UINT64_VEC_FLOAT_VEC_DOUBLE_VEC_STRING_VEC
    }
    @Struct.type('createcol')
    export class createcol extends Struct {
        @Struct.field(Name)
        author!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field('bool')
        allow_notify!: boolean
        @Struct.field(Name, {array: true})
        authorized_accounts!: Name[]
        @Struct.field(Name, {array: true})
        notify_accounts!: Name[]
        @Struct.field(Float64)
        market_fee!: Float64
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('createoffer')
    export class createoffer extends Struct {
        @Struct.field(Name)
        sender!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(UInt64, {array: true})
        sender_asset_ids!: UInt64[]
        @Struct.field(UInt64, {array: true})
        recipient_asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('createschema')
    export class createschema extends Struct {
        @Struct.field(Name)
        authorized_creator!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(FORMAT, {array: true})
        schema_format!: FORMAT[]
    }
    @Struct.type('createtempl')
    export class createtempl extends Struct {
        @Struct.field(Name)
        authorized_creator!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field('bool')
        transferable!: boolean
        @Struct.field('bool')
        burnable!: boolean
        @Struct.field(UInt32)
        max_supply!: UInt32
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        immutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('declineoffer')
    export class declineoffer extends Struct {
        @Struct.field(UInt64)
        offer_id!: UInt64
    }
    @Struct.type('extendschema')
    export class extendschema extends Struct {
        @Struct.field(Name)
        authorized_editor!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(FORMAT, {array: true})
        schema_format_extension!: FORMAT[]
    }
    @Struct.type('forbidnotify')
    export class forbidnotify extends Struct {
        @Struct.field(Name)
        collection_name!: Name
    }
    @Struct.type('init')
    export class init extends Struct {}
    @Struct.type('locktemplate')
    export class locktemplate extends Struct {
        @Struct.field(Name)
        authorized_editor!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Int32)
        template_id!: Int32
    }
    @Struct.type('logbackasset')
    export class logbackasset extends Struct {
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(Asset)
        backed_token!: Asset
    }
    @Struct.type('logburnasset')
    export class logburnasset extends Struct {
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Asset, {array: true})
        backed_tokens!: Asset[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        old_immutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        old_mutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(Name)
        asset_ram_payer!: Name
    }
    @Struct.type('logmint')
    export class logmint extends Struct {
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(Name)
        authorized_minter!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Name)
        new_asset_owner!: Name
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        immutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        mutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(Asset, {array: true})
        backed_tokens!: Asset[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        immutable_template_data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('lognewoffer')
    export class lognewoffer extends Struct {
        @Struct.field(UInt64)
        offer_id!: UInt64
        @Struct.field(Name)
        sender!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(UInt64, {array: true})
        sender_asset_ids!: UInt64[]
        @Struct.field(UInt64, {array: true})
        recipient_asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('lognewtempl')
    export class lognewtempl extends Struct {
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Name)
        authorized_creator!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field('bool')
        transferable!: boolean
        @Struct.field('bool')
        burnable!: boolean
        @Struct.field(UInt32)
        max_supply!: UInt32
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        immutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('logsetdata')
    export class logsetdata extends Struct {
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        old_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        new_data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('logtransfer')
    export class logtransfer extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        to!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('mintasset')
    export class mintasset extends Struct {
        @Struct.field(Name)
        authorized_minter!: Name
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Name)
        new_asset_owner!: Name
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        immutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        mutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
        @Struct.field(Asset, {array: true})
        tokens_to_back!: Asset[]
    }
    @Struct.type('offers_s')
    export class offers_s extends Struct {
        @Struct.field(UInt64)
        offer_id!: UInt64
        @Struct.field(Name)
        sender!: Name
        @Struct.field(Name)
        recipient!: Name
        @Struct.field(UInt64, {array: true})
        sender_asset_ids!: UInt64[]
        @Struct.field(UInt64, {array: true})
        recipient_asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
        @Struct.field(Name)
        ram_payer!: Name
    }
    @Struct.type('payofferram')
    export class payofferram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(UInt64)
        offer_id!: UInt64
    }
    @Struct.type('remcolauth')
    export class remcolauth extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        account_to_remove!: Name
    }
    @Struct.type('remnotifyacc')
    export class remnotifyacc extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Name)
        account_to_remove!: Name
    }
    @Struct.type('schemas_s')
    export class schemas_s extends Struct {
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field(FORMAT, {array: true})
        format!: FORMAT[]
    }
    @Struct.type('setassetdata')
    export class setassetdata extends Struct {
        @Struct.field(Name)
        authorized_editor!: Name
        @Struct.field(Name)
        asset_owner!: Name
        @Struct.field(UInt64)
        asset_id!: UInt64
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        new_mutable_data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('setcoldata')
    export class setcoldata extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(pair_string_ATOMIC_ATTRIBUTE, {array: true})
        data!: pair_string_ATOMIC_ATTRIBUTE[]
    }
    @Struct.type('setmarketfee')
    export class setmarketfee extends Struct {
        @Struct.field(Name)
        collection_name!: Name
        @Struct.field(Float64)
        market_fee!: Float64
    }
    @Struct.type('setversion')
    export class setversion extends Struct {
        @Struct.field('string')
        new_version!: string
    }
    @Struct.type('templates_s')
    export class templates_s extends Struct {
        @Struct.field(Int32)
        template_id!: Int32
        @Struct.field(Name)
        schema_name!: Name
        @Struct.field('bool')
        transferable!: boolean
        @Struct.field('bool')
        burnable!: boolean
        @Struct.field(UInt32)
        max_supply!: UInt32
        @Struct.field(UInt32)
        issued_supply!: UInt32
        @Struct.field(UInt8, {array: true})
        immutable_serialized_data!: UInt8[]
    }
    @Struct.type('tokenconfigs_s')
    export class tokenconfigs_s extends Struct {
        @Struct.field(Name)
        standard!: Name
        @Struct.field('string')
        version!: string
    }
    @Struct.type('transfer')
    export class transfer extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        to!: Name
        @Struct.field(UInt64, {array: true})
        asset_ids!: UInt64[]
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('withdraw')
    export class withdraw extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        token_to_withdraw!: Asset
    }
}
export const TableMap = {
    assets: Types.assets_s,
    balances: Types.balances_s,
    collections: Types.collections_s,
    config: Types.config_s,
    offers: Types.offers_s,
    schemas: Types.schemas_s,
    templates: Types.templates_s,
    tokenconfigs: Types.tokenconfigs_s,
}
export interface TableTypes {
    assets: Types.assets_s
    balances: Types.balances_s
    collections: Types.collections_s
    config: Types.config_s
    offers: Types.offers_s
    schemas: Types.schemas_s
    templates: Types.templates_s
    tokenconfigs: Types.tokenconfigs_s
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any
export type ActionNames = keyof ActionNameParams
export type TableNames = keyof TableTypes
